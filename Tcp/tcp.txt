1.Tcp网络分层架构
 应用层：请求方式，http协议，版本号
 传输层：增加TCP头部信息，包含端口，序列号等
 网络互联层：增加源ip地址等
 网络访问层：增加以太网头部，包含mac地址等等
 物理层
  好处：
 1.各层独立，标准化接口，各层不好
 2.更好灵活性 
 3.易于测试和维护，提高可测试性，某一层有了更好的协议可以整体替换
 4.促进标准化
 
 2.tcp三次握手

 1.客户端发送syn seq = x   状态：syn_sent
 2.服务端回syn seq = 有，ack = x+1   状态：syn_rcvd
 3.客户端请求ack = y+1  状态：established

time_wait:客户端告诉服务端我现在没有数据要发送，但是具有接受数据的能力

3.tcp的四次挥手
 1.客户端：发送fin   状态：fin_wait_1
 2.服务端收到fin请求，变为close_wait状态
 3.服务端ack确认，客户端变为 fin_wait_2
 4.服务端发送fin信息，变为last_ack状态，close
 5.客户端收到服务端fin,变为time_wait状态

4.一个常见的关闭连接过程如下：
 1.当客户端没有待发送的数据时，它会向服务端发送 FIN 消息，发送消息后会进入 FIN_WAIT_1 状态；
 2.服务端接收到客户端的 FIN 消息后，会进入 CLOSE_WAIT 状态并向客户端发送 ACK 消息，客户端接收到 ACK 消息时会进入 FIN_WAIT_2 状态；
 3.当服务端没有待发送的数据时，服务端会向客户端发送 FIN 消息；
 4.客户端接收到 FIN 消息后，会进入 TIME_WAIT 状态并向服务端发送 ACK 消息，服务端收到后会进入 CLOSED 状态；
 5.客户端等待两个最大数据段生命周期（Maximum segment lifetime，MSL）的时间后也会进入 CLOSED 状态；

5.为什么需要TIME_WAIT
TIME_WAIT一定是发生在主动关闭一方
被动关闭一方，会直接进入CLOSED状态，而主动关闭一方需要等待2*MSL时间才会最终关闭。
原因：
1、防止被动关闭方的延迟数据被人窃取
2、防止被动关闭方没有收到最后的ACK

6.SYN Flood攻击
是一种利用TCP协议缺陷,发送大量伪造的TCP连接请求,常用假冒的IP或IP号段发来海量的请求连接的第一个握手包(SYN包),被攻击服务器回应第二个握手包(SYN+ ACK包),因为对方是假冒IP对方永远收不到包且不会回应第三个握手包。导致被攻击服务器保持大量SYN RECV状态的“半连接”,并且会重试默认5次回应第二个握手包,塞满TCP等待连接队列,资源耗尽(CPU满负荷或内存不足) ,让正常的业务请求连接不进来
 解决：1.增加可积压队列
      2.调整半链接队列时间，加快回收速度
      3.cookie限制
    
7.tcp怎么打开tof
  在请求头部带cookie

8.tcp报文中的发送和回显时间戳有什么用
 1.计算往返的时延
 2.防止序列的回绕问题，当窗口缩放达到1GB，序列号归0复用

9.tcp超时重传时间计算
 (retra  timeout)rto
 rto太小，导致不必要的重传
 rto太大，重传时间过大
 1.经典方法适合rto波动较小 往返时延Rtt  0.8
 
10.tcp流量控制是怎么实现的
  1.滑动窗口，计数器来实现 （要记录时间窗口内的所有行为记录，如果这个量特别大的时候，内存消耗会变得非常严重）

11.如何理解keep-alive
  检测长时间死链接
 1.定时发送探测包，默认设定时间7200s，现实业务时间过长

12.tcp和udp的区别
  udp:是一个面向无连接的传输层协议
  tcp:面向连接，可靠的，基于字节流的传输协议
1.面向连接：需要三次握手建立连接
2.可靠性 
  2.1：tcp是有状态的
  2.2：tcp可控制的，丢包或者网络环境不佳，tcp自己调整控制发送速度和重发

13：自己设置一个qq,网络协议如何考虑设计
   1.登陆采用tcp和http协议
   2.消息层采用udp协议

14：分布式聊天室聊天消息如何实现
  
 1.STOMP协议和redis的订阅推送
 2.AMQP
 



