web安全
防范 CSRF 攻击可以遵循以下几种规则：
Get 请求不对数据进行修改
不让第三方网站访问到用户 Cookie
阻止第三方网站请求接口
请求时附带验证信息，比如验证码或者 Token


sql注入

跨站攻击

select和epoll的差别
同样性是：多路I/O复用
select本质上是通过设置或者检查存放fd标志位的数据结构来进行下一步处理。这样所带来的缺点是：
1、 单个进程可监视的fd数量被限制，即能监听端口的大小有限。
32位机默认是1024个。64位机默认是2048.
2、 对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低
3、需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时复制开销大

epoll :事件驱动，没连接数量限制
1、没有最大并发连接的限制，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）；
2、效率提升，不是轮询的方式，不会随着FD数目的增加效率下降。只有活跃可用的FD才会调用callback函数；
即Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll


tcp可靠性和塞控制
1、TCP可靠传输：TCP是可靠的传输层协议，主要用过序号确认机制和超时重传机制来实现可靠传输。

（1）、序号确认机制：TCP将要传送的整个应用层报文看成一个个字节组成的数据流,然后对每个字节进行编号，
所以对于同一个应用层报文，每一个字节都一个唯一的序号，这个序号代表着这个字节在这个报文中是第几个字节数据。
在连接建立时，TCP将每一次所传送的报文段中的第一个数据字节的序号，放在TCP首部的序号字段中。
	 TCP的确认是对接收到的数据的最高序号表示确认，所以返回的确认序号是最高序号加1（因为确认序号
期望下次收到的数据的第一个字节的序号），因此确认具有累积效果。
	 由于TCP能提供全双工通信，因此通信双方不必专门发送确认报文，可以在传输数据报文是将确认信息捎带传送。
（2）、超时重传机制：超时重传机制最关键因素是重传定时器的定时设置，但是确定合适的往返时延RTT是很困难的事情。
所以 针对不同 的网络以及不同的情况计算往返时延，TCP采用了一种自适应算法。算法思想如下：记录每一个报文发出时间
以及确认报文收到的时间，计算出的两个时间差就是报文往返时延。  将各个报文往返时延加权平均，就得到平均往返时延。
每次发送了一个报文就记录其往返时延，然后重新计算平均往返时延。 这个算法存在一个问题：无法判断，收到的确认报文
是对之前发的报文的确认还是对重发的报文的确认，因此，Karn 对上述算法提出修改， 若这个报文被重发了那么不再计算其
往返时延。这样做提高了往返时延的准确性。
（3）、定时器：TCP中有三种定时器，重传定时器（在超过计算出的重传时间没接收到确认报文，则重新发送报文），
持续定时器（这个定时器是为了测试，接收方接收窗口是否更新（窗口更新是相对窗口为0而言），保活定时器，
这个定时器的作用是为了测试通信的另一发是否存活，若不存活吗，则断开连接。

2、TCP流量控制
	流量控制的思想很简单，在TCP报文首部会有一个字段记录发送信息一方最大能接收的字节数，TCP通过这个字段来控制发送
的字节数，从而达到控制流量的效果，由于这个字段大小可以根据实际情况进行改变，所以这种方法也被称为滑动窗口。

3、TCP拥塞控制
	拥塞控制的基本功能是避免网络发生拥塞，或者缓解已经发生的拥塞。TCP/IP 拥塞控制机制主要集中在传输层实现。
TCP为了有效的进行拥塞控制，需要通过拥塞窗口来衡量网络的拥塞程度。需要注意的是发送的数据量是拥塞窗口和接收
窗口的较小值，当TCP连接刚刚建立时，将拥塞窗口cwnd设置为一个报文段大小，并且当cwnd <= ssthresh 时，指数方式增大cwnd(即每经过一次传输，cwnd 加倍)。
	（2）、拥塞避免：当cwnd >=  ssthresh 时，为了避免网络阻塞，采用拥塞避免算法，按线性方式增大cwnd ,即每经过一次
传输，cwnd 只增大一个报文段大小。
	（3）、快速重传：如果发送方连续收到三个重复确认的ACK（在传输过程中会出现out-of-order的现象，但是在滑动窗口中
会严格的顺序控制，假设有4，5，6三个待接收的数据包，先收到了5,6，协议栈是不会回复对5,6包的确认，而是根据TCP协议的
规定，当接收方收到乱序片段时，需要重复发送ACK, 在这个地方会发送报文4 seq的ACK，表明需要报文4没有被接收到，
如果此后收到的是报文7，那么仍然要回报文4 seq的ACK，如果连续发送3个 dup ACK，接收端认为这个片段已经丢失，进行快速重传。），也就是说如果收到连续的相同的包ACK包则表示，这个包的，接收方并没有收到，故需要重传，而不必等到重传定时器超时之后再重传。
	（4）、快速恢复：快速恢复




进程间通信方式
3.管道 (named pipe) ：有名管道，高级管道，无名管道 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。
4.消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。
5.信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。
6.信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。
7.共享内存( shared memory ) ： 共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。
8.套接字( socket ) ： 套解字也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信


docker的核心原理
1.namespaces 【命名空间】
复制代码
使用linux的命名空间实现的进程间隔离。Docker 容器内部的任意进程都对宿主机器的进程一无所知。
除了进程相关的命名空间，还会设置与用户、网络、IPC 以及 UTS 相关的命名空间。
Docker 通过命名空间成功完成了与宿主机进程和网络的隔离。
虽然docker通过命名空间创建了网络隔离，但依旧需要与外界连接才能有用。
Docker 为我们提供了四种不同的网络模式，Host、Container、None 和 Bridge 模式。【四种模式区别】
默认使用bridge模式：在这种模式下，除了分配隔离的网络命名空间之外，Docker 还会为所有的容器设置 IP 地址。当 Docker 服务器在主机上启动之后会创建新的虚拟网桥 docker0，随后在该主机上启动的全部服务在默认情况下都与该网桥相连。
复制代码
2.control groups CGGroups【控制组】
Control Groups（简称 CGroups）就是能够隔离宿主机器上的物理资源，例如 CPU、内存、磁盘 I/O 和网络带宽。
3.union filesystem【联合文件系统】


mysql
高可用，高并发聚群方案
b+索引
前缀索引
回表查询

mysql优化方式

redis排行榜数据结构
zset
